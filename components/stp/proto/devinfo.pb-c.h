/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: devinfo.proto */

#ifndef PROTOBUF_C_devinfo_2eproto__INCLUDED
#define PROTOBUF_C_devinfo_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Info__Device Info__Device;
typedef struct _Info__Battery Info__Battery;


/* --- enums --- */

typedef enum _Info__Device__Type {
  INFO__DEVICE__TYPE__INVALID = 0,
  INFO__DEVICE__TYPE__BAND = 1,
  INFO__DEVICE__TYPE__WATCH = 2,
  INFO__DEVICE__TYPE__EARPHONES = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INFO__DEVICE__TYPE)
} Info__Device__Type;
typedef enum _Info__Device__Model {
  INFO__DEVICE__MODEL__DM_INVALID = 0,
  /*
   *AMBIQ apollo3p
   */
  INFO__DEVICE__MODEL__DM_APOLLO3P = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INFO__DEVICE__MODEL)
} Info__Device__Model;
typedef enum _Info__Battery__Status {
  INFO__BATTERY__STATUS__IDLE = 0,
  INFO__BATTERY__STATUS__CHARGING = 1,
  INFO__BATTERY__STATUS__CHARGE_COMPLETED = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(INFO__BATTERY__STATUS)
} Info__Battery__Status;

/* --- messages --- */

struct  _Info__Device
{
  ProtobufCMessage base;
  /*
   *Device type
   */
  protobuf_c_boolean has_type;
  Info__Device__Type type;
  /*
   *Device model
   */
  protobuf_c_boolean has_model;
  Info__Device__Model model;
  /*
   *Fireware version
   */
  protobuf_c_boolean has_firmware_ver;
  uint32_t firmware_ver;
  /*
   *Hardware version
   */
  protobuf_c_boolean has_hardware_ver;
  uint32_t hardware_ver;
  /*
   *Serial number
   */
  protobuf_c_boolean has_sn;
  ProtobufCBinaryData sn;
  /*
   *MAC address
   */
  protobuf_c_boolean has_mac;
  ProtobufCBinaryData mac;
};
#define INFO__DEVICE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&info__device__descriptor) \
    , 0, INFO__DEVICE__TYPE__INVALID, 0, INFO__DEVICE__MODEL__DM_INVALID, 0, 0, 0, 0, 0, {0,NULL}, 0, {0,NULL} }


struct  _Info__Battery
{
  ProtobufCMessage base;
  /*
   *Power level [0, 100]
   */
  uint32_t level;
  /*
   *Charge status
   */
  protobuf_c_boolean has_status;
  uint32_t status;
};
#define INFO__BATTERY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&info__battery__descriptor) \
    , 0, 0, 0 }


/* Info__Device methods */
void   info__device__init
                     (Info__Device         *message);
size_t info__device__get_packed_size
                     (const Info__Device   *message);
size_t info__device__pack
                     (const Info__Device   *message,
                      uint8_t             *out);
size_t info__device__pack_to_buffer
                     (const Info__Device   *message,
                      ProtobufCBuffer     *buffer);
Info__Device *
       info__device__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   info__device__free_unpacked
                     (Info__Device *message,
                      ProtobufCAllocator *allocator);
/* Info__Battery methods */
void   info__battery__init
                     (Info__Battery         *message);
size_t info__battery__get_packed_size
                     (const Info__Battery   *message);
size_t info__battery__pack
                     (const Info__Battery   *message,
                      uint8_t             *out);
size_t info__battery__pack_to_buffer
                     (const Info__Battery   *message,
                      ProtobufCBuffer     *buffer);
Info__Battery *
       info__battery__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   info__battery__free_unpacked
                     (Info__Battery *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Info__Device_Closure)
                 (const Info__Device *message,
                  void *closure_data);
typedef void (*Info__Battery_Closure)
                 (const Info__Battery *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor info__device__descriptor;
extern const ProtobufCEnumDescriptor    info__device__type__descriptor;
extern const ProtobufCEnumDescriptor    info__device__model__descriptor;
extern const ProtobufCMessageDescriptor info__battery__descriptor;
extern const ProtobufCEnumDescriptor    info__battery__status__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_devinfo_2eproto__INCLUDED */
