/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: ota.proto */

#ifndef PROTOBUF_C_ota_2eproto__INCLUDED
#define PROTOBUF_C_ota_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003003 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Ota__File Ota__File;
typedef struct _Ota__FileRequest Ota__FileRequest;
typedef struct _Ota__FileCheck Ota__FileCheck;


/* --- enums --- */


/* --- messages --- */

typedef enum {
  OTA__FILE__FIELD__NOT_SET = 0,
  OTA__FILE__FIELD_CRC = 6,
  OTA__FILE__FIELD_DATA = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(OTA__FILE__FIELD)
} Ota__File__FieldCase;

struct  _Ota__File
{
  ProtobufCMessage base;
  /*
   *Maximum packets 
   */
  int32_t maxno;
  /*
   *Current packet sequence number
   */
  int32_t no;
  Ota__File__FieldCase field_case;
  union {
    uint32_t crc;
    ProtobufCBinaryData data;
  };
};
#define OTA__FILE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ota__file__descriptor) \
    , 0, 0, OTA__FILE__FIELD__NOT_SET, {0} }


struct  _Ota__FileRequest
{
  ProtobufCMessage base;
  uint32_t fmax_size;
  uint32_t battery;
};
#define OTA__FILE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ota__file_request__descriptor) \
    , 0, 0 }


struct  _Ota__FileCheck
{
  ProtobufCMessage base;
  uint32_t crc;
};
#define OTA__FILE_CHECK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&ota__file_check__descriptor) \
    , 0 }


/* Ota__File methods */
void   ota__file__init
                     (Ota__File         *message);
size_t ota__file__get_packed_size
                     (const Ota__File   *message);
size_t ota__file__pack
                     (const Ota__File   *message,
                      uint8_t             *out);
size_t ota__file__pack_to_buffer
                     (const Ota__File   *message,
                      ProtobufCBuffer     *buffer);
Ota__File *
       ota__file__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ota__file__free_unpacked
                     (Ota__File *message,
                      ProtobufCAllocator *allocator);
/* Ota__FileRequest methods */
void   ota__file_request__init
                     (Ota__FileRequest         *message);
size_t ota__file_request__get_packed_size
                     (const Ota__FileRequest   *message);
size_t ota__file_request__pack
                     (const Ota__FileRequest   *message,
                      uint8_t             *out);
size_t ota__file_request__pack_to_buffer
                     (const Ota__FileRequest   *message,
                      ProtobufCBuffer     *buffer);
Ota__FileRequest *
       ota__file_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ota__file_request__free_unpacked
                     (Ota__FileRequest *message,
                      ProtobufCAllocator *allocator);
/* Ota__FileCheck methods */
void   ota__file_check__init
                     (Ota__FileCheck         *message);
size_t ota__file_check__get_packed_size
                     (const Ota__FileCheck   *message);
size_t ota__file_check__pack
                     (const Ota__FileCheck   *message,
                      uint8_t             *out);
size_t ota__file_check__pack_to_buffer
                     (const Ota__FileCheck   *message,
                      ProtobufCBuffer     *buffer);
Ota__FileCheck *
       ota__file_check__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   ota__file_check__free_unpacked
                     (Ota__FileCheck *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Ota__File_Closure)
                 (const Ota__File *message,
                  void *closure_data);
typedef void (*Ota__FileRequest_Closure)
                 (const Ota__FileRequest *message,
                  void *closure_data);
typedef void (*Ota__FileCheck_Closure)
                 (const Ota__FileCheck *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor ota__file__descriptor;
extern const ProtobufCMessageDescriptor ota__file_request__descriptor;
extern const ProtobufCMessageDescriptor ota__file_check__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_ota_2eproto__INCLUDED */
